<%- include("../../views/partials/admin/header") %>

    <head>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css" rel="stylesheet">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css" />
        <style>
            .col-md-3 {
                padding: 20px;
                border: 1px solid #ddd;
                border-radius: 10px;
                margin: 10px;
            }

            .form-label {
                margin-bottom: 8px;
            }

            .form-control {
                width: 100%;
                padding: 8px;
                margin-bottom: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                box-sizing: border-box;
            }

            .d-grid {
                margin-top: 20px;
            }

            .btn-primary {
                background-color: #007bff;
                color: #fff;
                border: 1px solid #007bff;
                border-radius: 5px;
                padding: 10px 20px;
                cursor: pointer;
            }

            .btn-primary:hover {
                background-color: #0056b3;
                border-color: #0056b3;
            }

            .pagination-container {
                text-align: center;
            }

            .pagination {
                display: inline-block;
            }

            .pagination a,
            .pagination .current-page {
                display: inline-block;
                padding: 5px 10px;
                margin: 0 2px;
                border: 1px solid #ddd;
                text-decoration: none;
                color: #333;
            }

            .pagination a:hover {
                background-color: #f5f5f5;
            }

            .error-message {
                color: red;
            }

            tr,
            td,
            th {
                border: 1px solid #333;

            }

            .image-container {
                position: relative;
                display: inline-block;
                margin-right: 10px;
                margin-bottom: 10px;
                border: 1px solid black;
                border-radius: 6px;

            }

            .image-container .btn-danger {
                position: absolute;
                top: 5px;
                right: 5px;
                padding: 2px 5px;
                font-size: 10px;
            }




            #btnCrop,
            #CroppieContainer,
            #croppedImage {
                display: none;
            }

            #btnCrop,
            #croppedImage {
                margin: auto;
            }

            input[type="file"]::file-selector-button {
                border-radius: 4px;
                padding: 0 16px;
                height: 42px;
                cursor: pointer;
                background-color: white;
                transition: background-color 200ms;
            }

            input[type="file"]::file-selector-button:hover {
                background-color: #f3f4f6;
            }

            input[type="file"]::file-selector-button:active {
                background-color: #e5e7eb;
            }

            button {
                background-color: #2ecc71;
                color: #444444;
                font-weight: bold;
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                transition: background-color 0.3s;
                display: inline-block;
            }

            button:hover {
                background-color: #27ae60;
            }
        </style>
    </head>

    <body>
        <section class="content-main">
            <div class="content-header">
                <div>
                    <h2 class="content-title card-title">Add Product</h2>
                </div>
            </div>

            <div class="card shadow">
                <div class="card-body">
                    <form method="post" action="/admin/addProduct" enctype="multipart/form-data"
                        onsubmit="return handleFormSubmit(event)">
                        <div class="row">
                           
                            <div class="col-md-6">
                                <div class="mb-4 ">
                                    <label for="product_name" class="form-label">Name</label>
                                    <input type="text" name="productName" placeholder="Type here"
                                        class="form-control shadow" id="product_name" />
                                    <div id="name-error" class="error-message"></div>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Description</label>
                                    <textarea placeholder="Type here" name="description" class="form-control shadow"
                                        id="descriptionId" rows="3"></textarea>
                                    <div id="description-error" class="error-message"></div>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Brand</label>
                                    <select name="brands" class="form-select shadow form-control">
                                        <% brands.forEach(brand=> { %>
                                            <option value="<%= brand._id %>">
                                                <%= brand.brandName %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Category</label>
                                    <select name="category" class="form-select shadow form-control">
                                        <% categories.forEach(category=> { %>
                                            <option value="<%= category._id %>">
                                                <%= category.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>
                                <div class="mb-4 d-flex justify-content-start">
                                    <div class="col-md-5">
                                        <label class="form-label">Regular Price</label>
                                        <input type="number" name="regularPrice" id="regularPriceId" placeholder="Type here"
                                            class="form-control shadow" />
                                        <div id="regularPrice-error" class="error-message"></div>
    
                                    </div>
                                    <div class="col-md-5 ms-3">
                                        <label class="form-label">Sale Price</label>
                                        <input type="number" name="salePrice" id="salePriceId" placeholder="Type here"
                                            class="form-control shadow" />
                                        <div id="salePrice-error" class="error-message"></div>
    
                                    </div>
                                </div>
                               
                            </div>

                            <div class="col-md-6">
                                <div class="mb-4 ">
                                    <label class="form-label">Product Images</label>
                                    <input type="file" name="productImages" class="form-control shadow"
                                        id="productImages" multiple />
                                    <div id="images-error" class="error-message"></div>
                                    <div id="imagePreview" class="d-flex flex-wrap mt-3"></div>
                                    <div id="CroppieContainer"></div>
                                    <br>
                                    <button id="btnCrop" type="button" class="btn btn-primary mt-2">Crop Image</button>
                                </div>

                                <div class="mb-4">
                                    <label class="form-label">Gender</label>
                                    <select name="gender" class="form-select form-control shadow">
                                        <option value="Men">Men</option>
                                        <option value="Women">Women</option>
                                        <option value="Unisex">Unisex</option>
                                    </select>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Sizes : </label>
                                    <div class="d-flex">
                                        <div class="form-check ">
                                            <input type="checkbox" name="size" value="25ml" class="form-check-inline"
                                                id="size-25ml" checked />
                                            <label class="form-check-label" for="size-25ml">25ml</label>
                                        </div>
                                        <div class="form-check">
                                            <input type="checkbox" name="size" value="50ml" class="form-check-inline"
                                                id="size-50ml" checked />
                                            <label class="form-check-label" for="size-50ml">50ml</label>
                                        </div>
                                        <div class="form-check">
                                            <input type="checkbox" name="size" value="75ml" class="form-check-inline"
                                                id="size-75ml" checked />
                                            <label class="form-check-label" for="size-75ml">75ml</label>
                                        </div>
                                        <div class="form-check">
                                            <input type="checkbox" name="size" value="100ml" class="form-check-inline"
                                                id="size-100ml" checked />
                                            <label class="form-check-label" for="size-100ml">100ml</label>
                                        </div>
                                        <div class="form-check">
                                            <input type="checkbox" name="size" value="150ml" class="form-check-inline"
                                                id="size-150ml" checked />
                                            <label class="form-check-label" for="size-150ml">150ml</label>
                                        </div>
                                    </div>
                                    <div id="size-error" class="error-message"></div>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label ">Quantity</label>
                                    <input type="number" name="quantity" placeholder="Type here" id="quantityId"
                                        class="form-control shadow" />
                                    <div id="quantity-error" class="error-message"></div>

                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Status</label>
                                    <select name="status" class="form-select shadow form-control">
                                        <option value="Available">Available</option>
                                        <option value="Out of Stock">Out of Stock</option>
                                        <option value="Discontinued">Discontinued</option>
                                    </select>
                                </div>
                            </div>

                        </div>
                        <div class="d-grid mt-4">
                            <button class="btn btn-primary btn-lg" type="submit">Add Product</button>
                        </div>
                    </form>
                </div>
            </div>
        </section>



        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>
        <script>
            function handleFormSubmit(event) {

                event.preventDefault();


                if (!validateForm()) {
                    console.log("Form validation failed");
                    return;
                }

                const formData = new FormData();
                const formElements = event.target.elements;

                formData.append('productName', formElements['productName'].value.trim());
                formData.append('description', formElements['description'].value);
                formData.append('quantity', formElements['quantity'].value);
                formData.append('regularPrice', formElements['regularPrice'].value);
                formData.append('salePrice', formElements['salePrice'].value);
                formData.append('gender', formElements['gender'].value);
                formData.append('status', formElements['status'].value);
                formData.append('brands', formElements['brands'].value);
                formData.append('category', formElements['category'].value);


                const sizes = Array.from(document.querySelectorAll('input[name="size"]:checked')).map(cb => cb.value);
                sizes.forEach(size => formData.append('size', size));

                croppedImagesArray.forEach((image, index) => {
                    const blob = dataURItoBlob(image);
                    formData.append('productImages', blob, `croppedImage${index}.png`);
                });


                fetch('/admin/addProduct', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json().then(data => {
                                Swal.fire({
                                    icon: 'success',
                                    title: "Success",
                                    text: "product added successfully",
                                    timer: 2000
                                }).then(() => {
                                    window.location.href = "/admin/products";
                                });
                            });
                        } else {
                            return response.json().then(err => {
                                throw new Error(err.error);
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: "Oops",
                            text: error.message || "An error occurred while adding the product"
                        });
                    });


            }

            function dataURItoBlob(dataURI) {
                const byteString = atob(dataURI.split(',')[1]);
                const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
                const ab = new ArrayBuffer(byteString.length);
                const ia = new Uint8Array(ab);
                for (let i = 0; i < byteString.length; i++) {
                    ia[i] = byteString.charCodeAt(i);
                }
                return new Blob([ab], { type: mimeString });
            }

            function validateForm() {
                clearErrorMessage();
                const name = document.getElementsByName("productName")[0].value.trim();
                const description = document.getElementById("descriptionId").value.trim();

                const quantityInput = document.getElementById("quantityId").value.trim();
                const regularPriceInput = document.getElementById("regularPriceId").value.trim();
                const salePriceInput = document.getElementById("salePriceId").value.trim();

                const quantity = quantityInput === "" ? NaN : parseFloat(quantityInput);
                const regularPrice = regularPriceInput === "" ? NaN : parseFloat(regularPriceInput);
                const salePrice = salePriceInput === "" ? NaN : parseFloat(salePriceInput);

                const sizes = Array.from(document.querySelectorAll('input[name="size"]:checked'));
                const files = document.getElementById('productImages').files;

                let isValid = true;

                if (name == "") {
                    displayErrorMessage("name-error", "Please enter a name")
                    isValid = false

                } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                    displayErrorMessage("name-error", "Product name should contain only aplphabetic characters")
                    isValid = false
                }
                if (description == "") {
                    displayErrorMessage("description-error", "Please enter a description")
                    isValid = false
                }

                if (isNaN(quantity)) {
                    displayErrorMessage("quantity-error", "Please enter Stock of the product");
                    isValid = false;
                } else if (quantity < 0) {
                    displayErrorMessage("quantity-error", "Stock quantity can't be a negative value");
                    isValid = false;
                }



                if (isNaN(regularPrice)) {
                    displayErrorMessage("regularPrice-error", "Please enter Regular Price");
                    isValid = false;
                } else if (regularPrice <= 0) {
                    displayErrorMessage("regularPrice-error", "Regular Price can't be a negative value or zero");
                    isValid = false;
                }

                if (isNaN(salePrice)) {
                    displayErrorMessage("salePrice-error", "Please enter Sale Price");
                    isValid = false;
                } else if (salePrice <= 0) {
                    displayErrorMessage("salePrice-error", "Sale Price can't be a negative value or zero");
                    isValid = false;
                } else if (salePrice > regularPrice) {
                    displayErrorMessage("salePrice-error", "Sale Price must be lower than regular price");
                    isValid = false;
                }

                if (sizes.length === 0) {
                    displayErrorMessage("size-error", "Please select at least one size");
                    isValid = false;
                }


                if (croppedImagesArray.length < 4) {
                    displayErrorMessage("images-error", "Please select at least four images");
                    isValid = false;
                }
           

                return isValid;
            }


            function displayErrorMessage(elementId, message) {
                var errorElement = document.getElementById(elementId)
                errorElement.innerText = message;
                errorElement.style.display = "block";
            }

            function clearErrorMessage() {
                var errorElements = document.getElementsByClassName("error-message")
                Array.from(errorElements).forEach((element) => {
                    element.innerText = "";
                    element.style.display = "none"
                })

            }

        </script>


        <script>

            let croppedImagesArray = [];


            function previewImages(event) {
                const fileInput = event.target;
                const files = Array.from(fileInput.files);

                files.forEach((file, index) => {
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const imgContainer = document.createElement('div');
                            imgContainer.classList.add('image-container');
                            imgContainer.style.position = 'relative';
                            imgContainer.style.display = 'inline-block';
                            imgContainer.style.marginRight = '10px';

                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.classList.add('img-thumbnail');
                            img.style.maxWidth = '100px';

                            const deleteBtn = document.createElement('button');
                            deleteBtn.innerText = 'Remove';
                            deleteBtn.classList.add('btn', 'btn-danger', 'btn-sm');
                            deleteBtn.style.position = 'absolute';
                            deleteBtn.style.top = '5px';
                            deleteBtn.style.right = '5px';

                            deleteBtn.addEventListener('click', () => {
                                croppedImagesArray.splice(index, 1);
                                imgContainer.remove();
                            });

                            imgContainer.appendChild(img);
                            imgContainer.appendChild(deleteBtn);
                            document.getElementById('imagePreview').appendChild(imgContainer);
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }

            const upload = document.querySelector("#productImages");
            const cropButton = document.querySelector('#btnCrop');
            const croppieContainer = document.querySelector('#CroppieContainer');
            const imagePreview = document.querySelector('#imagePreview');
            var CroppieContainer = document.getElementById("CroppieContainer")
            let currentFile = null;

            let croppieInstance = new Croppie(document.createElement('div'), {
                viewport: { width: 150, height: 150, type: 'square' },
                boundary: { width: 250, height: 250 },
                enableResize: true
            });
            croppieContainer.appendChild(croppieInstance.element);


            upload.addEventListener('change', function (e) {
                currentFile = e.target.files[0];
                const reader = new FileReader();
                reader.onload = function (event) {
                    croppieInstance.bind({
                        url: event.target.result
                    });
                };
                reader.readAsDataURL(currentFile);

                cropButton.style.display = 'block';
                CroppieContainer.style.display = 'block';
            });

            cropButton.addEventListener('click', function () {
                croppieInstance.result('canvas').then(function (croppedImage) {
                    croppedImagesArray.push(croppedImage);  // Add cropped image to array

                    const imgContainer = document.createElement('div');
                    imgContainer.classList.add('image-container');
                    imgContainer.style.position = 'relative';
                    imgContainer.style.display = 'inline-block';
                    imgContainer.style.marginRight = '10px';

                    const img = document.createElement('img');
                    img.src = croppedImage;
                    img.classList.add('img-thumbnail');
                    img.style.maxWidth = '100px';

                    const deleteBtn = document.createElement('button');
                    deleteBtn.innerText = 'Remove';
                    deleteBtn.classList.add('btn', 'btn-danger', 'btn-sm');
                    deleteBtn.style.position = 'absolute';
                    deleteBtn.style.top = '5px';
                    deleteBtn.style.right = '5px';

                    deleteBtn.addEventListener('click', () => {
                        const index = croppedImagesArray.indexOf(croppedImage);
                        if (index > -1) {
                            croppedImagesArray.splice(index, 1);
                        }
                        imgContainer.remove();
                    });

                    imgContainer.appendChild(img);
                    imgContainer.appendChild(deleteBtn);
                    imagePreview.appendChild(imgContainer);

                    upload.value = '';
                    cropButton.style.display = 'none';
                    CroppieContainer.style.display = 'none';

                });
            });

        </script>


        <%- include("../../views/partials/admin/footer") %>